import { addMaterialDto, editMaterialDetailDto, PublishDto, searchMaterialByIdsDto, searchMaterialDetailDto, searchMaterialDto } from "./physical/physical.dto";
import { MultrepoGroupService } from "../group/multrepo/multrepoGroup.service";
import { MaterialConfigService } from "./config/materialConfig.service";
import { VirtualMaterialService } from "./virtual/virtual.service";
import { MonorepoGroupService } from "../group/monorepo/monorepoGroup.service";
import { ProjectService } from "../project/project.service";
import { CodeGroupService } from "../group/code/code.service";
import { TaskService } from "../task/task.service";
import { PhysicalMaterialService } from "./physical/physical.service";
export declare class MaterialController {
    private multrepoGroupService;
    private projectService;
    private groupService;
    private monorepoGroupService;
    private materialConfigService;
    private VirtualMaterialService;
    private physicalMaterialService;
    private taskService;
    constructor(multrepoGroupService: MultrepoGroupService, projectService: ProjectService, groupService: CodeGroupService, monorepoGroupService: MonorepoGroupService, materialConfigService: MaterialConfigService, VirtualMaterialService: VirtualMaterialService, physicalMaterialService: PhysicalMaterialService, taskService: TaskService);
    save(params: addMaterialDto, user: Payload): Promise<any>;
    saveVirtual(params: addMaterialDto, user: Payload): Promise<any>;
    editVirtual(params: editMaterialDetailDto, user: Payload): Promise<import("typeorm").FindAndModifyWriteOpResultObject>;
    edit(params: editMaterialDetailDto, user: Payload): Promise<import("typeorm").FindAndModifyWriteOpResultObject>;
    getVirtualList(params: searchMaterialDto): Promise<import("./virtual/virtual.mysql.entity").VirtualMaterial[]>;
    getList(params: searchMaterialDto): Promise<import("./physical/physical.mysql.entity").PhysicalMaterial[]>;
    getListByBizIds(params: searchMaterialByIdsDto): Promise<any>;
    getDetail(params: searchMaterialDetailDto): Promise<{
        id: import("typeorm").ObjectID;
        groupId: string;
        projectId: number;
        type: string;
        devVersion: string;
        testVersion: string;
        fixVersion: string;
        releaseVersion: string;
        alphaVersion: number;
        betaVersion: number;
        gammaVersion: number;
        currentVersion: string;
        lastVersion: string;
        createDate: string;
        updateDate: string;
        updateUser: string;
        zhName: string;
        enName: string;
        desc: string;
        projectTypes: string[];
        gitProjectId: number;
        gitNamespace: string;
        gitProjectUrl: string;
        gitProjectName: string;
        gitProjectDesc: string;
        createTime?: string;
        updateTime?: string;
        creatorName: string;
        creatorId: number;
        status: string;
    }>;
    getDetailMicro(projectDetailDto: searchMaterialDetailDto): Promise<import("./physical/physical.mysql.entity").PhysicalMaterial>;
    publish(publishDto: PublishDto, user: Payload): Promise<import("../task/task.mysql.entity").Task>;
}
